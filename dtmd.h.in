/*
 * Copyright (C) 2016-2019 i.Dark_Templar <darktemplar@dark-templar-archives.net>
 *
 * This file is part of DTMD, Dark Templar Mount Daemon.
 *
 * DTMD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DTMD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with DTMD.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef DTMD_H
#define DTMD_H

#define dtmd_daemon_lock "@PIDFILE_PATH@"
#define dtmd_daemon_socket_addr "@SOCKET_PATH@"
#define dtmd_command_max_length 4096

#ifdef __cplusplus
extern "C" {
#endif

typedef enum dtmd_removable_media_type
{
	dtmd_removable_media_type_unknown_or_persistent = 0,
	dtmd_removable_media_type_device_partition      = 1,
	dtmd_removable_media_type_stateless_device      = 2,
	dtmd_removable_media_type_stateful_device       = 3
} dtmd_removable_media_type_t;

typedef enum dtmd_removable_media_subtype
{
	dtmd_removable_media_subtype_unknown_or_persistent = 0,
	dtmd_removable_media_subtype_removable_disk        = 1,
	dtmd_removable_media_subtype_sd_card               = 2,
	dtmd_removable_media_subtype_cdrom                 = 3
} dtmd_removable_media_subtype_t;

typedef enum dtmd_removable_media_state
{
	dtmd_removable_media_state_unknown = 0,
	dtmd_removable_media_state_empty   = 1,
	dtmd_removable_media_state_clear   = 2,
	dtmd_removable_media_state_ok      = 3
} dtmd_removable_media_state_t;

typedef enum dtmd_error_code
{
	dtmd_error_code_unknown                      = 0,
	dtmd_error_code_generic_error                = 1,
	dtmd_error_code_no_such_removable_device     = 2,
	dtmd_error_code_fstype_not_recognized        = 3,
	dtmd_error_code_unsupported_fstype           = 4,
	dtmd_error_code_device_already_mounted       = 5,
	dtmd_error_code_device_not_mounted           = 6,
	dtmd_error_code_failed_parsing_mount_options = 7,
	dtmd_error_code_mount_point_busy             = 8
} dtmd_error_code_t;

typedef struct dtmd_removable_media
{
	char *path;
	dtmd_removable_media_type_t type;
	dtmd_removable_media_subtype_t subtype;
	dtmd_removable_media_state_t state;
	char *fstype; // optional
	char *label; // optional
	char *mnt_point; // optional
	char *mnt_opts; // optional

	struct dtmd_removable_media *parent;

	struct dtmd_removable_media *children_list;

	struct dtmd_removable_media *next_node;
	struct dtmd_removable_media *prev_node;

	void *private_data;
} dtmd_removable_media_t;

#ifdef __cplusplus
}
#endif

#define dtmd_string_device_type_unknown_or_persistent "unknown"
#define dtmd_string_device_type_device_partition      "device partition"
#define dtmd_string_device_type_stateless_device      "stateless device"
#define dtmd_string_device_type_stateful_device       "stateful device"

#define dtmd_string_device_subtype_unknown_or_persistent "unknown"
#define dtmd_string_device_subtype_removable_disk        "removable disk"
#define dtmd_string_device_subtype_sd_card               "sdcard"
#define dtmd_string_device_subtype_cdrom                 "cdrom"

#define dtmd_string_state_unknown "unknown"
#define dtmd_string_state_empty   "empty"
#define dtmd_string_state_clear   "clear"
#define dtmd_string_state_ok      "ok"

#define dtmd_string_error_code_unknown                      "unknown"
#define dtmd_string_error_code_generic_error                "generic error"
#define dtmd_string_error_code_no_such_removable_device     "no such removable device"
#define dtmd_string_error_code_fstype_not_recognized        "fstype not recognized"
#define dtmd_string_error_code_unsupported_fstype           "unsupported fstype"
#define dtmd_string_error_code_device_already_mounted       "device already mounted"
#define dtmd_string_error_code_device_not_mounted           "device not mounted"
#define dtmd_string_error_code_failed_parsing_mount_options "failed parsing mount options"
#define dtmd_string_error_code_mount_point_busy             "mount point busy"

/* Notification types */

#define dtmd_notification_removable_device_added "removable_device_added"
/* parameters: parent_path, path, type */
/* additional parameters for type 'removable_device' and 'stateful_device': subtype */
/* additional parameters for type 'stateful_device': state */
/* additional parameters for type 'device_partition' and 'stateful_device': fstype (or NULL), label (or NULL), mount_point (or NULL), mount_options (or NULL) */

#define dtmd_notification_removable_device_removed "removable_device_removed"
/* parameters: path */

#define dtmd_notification_removable_device_changed "removable_device_changed"
/* same parameters as for 'dtmd_notification_removable_device_added' */
/* any parameter may change, including type, except for parent_path and path */

#define dtmd_notification_removable_device_mounted "removable_device_mounted"
/* parameters: path, mount_point, mount_options */

#define dtmd_notification_removable_device_unmounted "removable_device_unmounted"
/* parameters: path, mount_point */

/* Commands and responses */

#define dtmd_command_list_all_removable_devices "list_all_removable_devices"
/*
 *	input: none
 *
 *	returns full tree of devices, similar to list_removable_device("/")
 *
 *	returns:
 *		device: format same as for 'dtmd_notification_removable_device_added' parameters format
 *
 *		or "failed" on fail
 */

#define dtmd_command_list_removable_device "list_removable_device"
/*
 *	input:
 *		"removable device path"
 *
 *	returns subtree of removable devices
 *
 *	returns:
 *		device: format same as for 'dtmd_notification_removable_device_added' parameters format
 *
 *		or "failed" on fail
 */

#define dtmd_command_mount "mount"
/*
 *	input:
 *		"path, mount_options"
 *
 *	returns:
 *		"succeeded" or "failed"
 */

#define dtmd_command_unmount "unmount"
/*
 *	input:
 *		"path"
 *
 *	returns:
 *		"succeeded" or "failed"
 */

#define dtmd_command_list_supported_filesystems "list_supported_filesystems"
/*
 *	input: none
 *
 *	returns:
 *		list of filesystem names
 *
 *		or "failed" on fail
 */

#define dtmd_command_list_supported_filesystem_options "list_supported_filesystem_options"
/*
 *	input:
 *		"filesystem"
 *
 *	returns:
 *		list of filesystem option names
 *
 *		or "failed" on fail
 */

#define dtmd_command_poweroff "poweroff"
/*
 *	input:
 *		"removable device path"
 *
 *	powers off removable device if it's supported
 *
 *	returns:
 *		"succeeded" or "failed"
 */

#define dtmd_response_started "started"
#define dtmd_response_finished "finished"
#define dtmd_response_succeeded "succeeded"
#define dtmd_response_failed "failed"

#define dtmd_root_device_path "/"
#define dtmd_response_argument_removable_device "removable_device"
#define dtmd_response_argument_supported_filesystems_lists "supported_filesystems_list"
#define dtmd_response_argument_supported_filesystem_options_lists "supported_filesystem_options_list"

#endif /* DTMD_H */
